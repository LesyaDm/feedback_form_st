{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet FormComponent = class FormComponent {\n  constructor(requestsServise, router, formBuilder) {\n    this.requestsServise = requestsServise;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.contactList = [];\n    this.topicList = [];\n    this.newContact = true;\n    this.siteKey = '6LdFQr4lAAAAAPAR37RURyid0rOym5E0N7RQdoUO';\n    this.TopicMap = new Map();\n    this.contact = {\n      id: 0,\n      ContactName: '',\n      ContactEmail: '',\n      ContactPhone: ''\n    };\n    this.message = {\n      id: 0,\n      TopicId: 0,\n      ContactId: 0,\n      MessageText: ''\n    };\n    this.formProv = new FormGroup({\n      name: new FormControl('', Validators.required),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      phone: new FormControl('', [Validators.required, Validators.pattern('[0-9]{11,15}')]),\n      topic: new FormControl('', Validators.required),\n      mes: new FormControl('', Validators.required),\n      captcha: new FormControl('', Validators.required)\n    });\n  }\n  ngOnInit() {\n    this.contactList$ = this.requestsServise.getAllContacts();\n    this.topicList$ = this.requestsServise.getAllTopics();\n    this.refreshTopicMap();\n  }\n  refreshTopicMap() {\n    this.requestsServise.getAllTopics().subscribe(data => {\n      this.topicList = data;\n      for (let i of data) {\n        this.TopicMap.set(this.topicList[i].id, this.topicList[i].topicName);\n      }\n    });\n  }\n  get name() {\n    return this.formProv.get('name');\n  }\n  get email() {\n    return this.formProv.get('email');\n  }\n  get phone() {\n    return this.formProv.get('phone');\n  }\n  get topic() {\n    return this.formProv.get('topic');\n  }\n  get mes() {\n    return this.formProv.get('mes');\n  }\n  get captcha() {\n    return this.formProv.get('captcha');\n  }\n  addRequest() {\n    this.requestsServise.getAllContacts().subscribe(data => {\n      this.contactList = data;\n      this.newContact = true;\n      for (let i in this.contactList) {\n        if (this.contactList[i].contactEmail == this.contact.ContactEmail && this.contactList[i].contactPhone == this.contact.ContactPhone) {\n          this.newContact = false;\n          this.message.ContactId = data[+i].id;\n        }\n      }\n    });\n    this.requestsServise.addMessage(this.message).subscribe({\n      next: result => {\n        this.router.navigate(['request/:id']);\n      }\n    });\n    if (this.newContact == true) {\n      this.requestsServise.addContact(this.contact).subscribe({\n        next: result => {\n          this.message.ContactId = Object.values(result)[0];\n          this.requestsServise.addMessage(this.message).subscribe({\n            next: result => {\n              this.router.navigate(['request/:id']);\n            }\n          });\n        }\n      });\n    }\n  }\n};\nFormComponent = __decorate([Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss']\n})], FormComponent);\nexport { FormComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","FormGroup","Validators","FormComponent","constructor","requestsServise","router","formBuilder","Map","id","ContactName","ContactEmail","ContactPhone","TopicId","ContactId","MessageText","name","required","email","phone","pattern","topic","mes","captcha","ngOnInit","contactList$","getAllContacts","topicList$","getAllTopics","refreshTopicMap","subscribe","data","topicList","i","TopicMap","set","topicName","formProv","get","addRequest","contactList","newContact","contactEmail","contact","contactPhone","message","addMessage","next","result","navigate","addContact","Object","values","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Мои работы (сайты)\\Feedback_form_ST\\FeedbackFormStUI\\src\\app\\components\\form\\form.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Contact } from 'src/app/models/contact.model';\nimport { Message } from 'src/app/models/message.model';\nimport { RequestsService } from 'src/app/services/requests.service';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss']\n})\nexport class FormComponent implements OnInit {\n\n  contactList$!: Observable<any[]>;\n  topicList$!: Observable<any[]>;\n  contactList: any = [];\n  topicList: any = [];\n  newContact: boolean = true;\n  siteKey: string = '6LdFQr4lAAAAAPAR37RURyid0rOym5E0N7RQdoUO';\n\n  TopicMap:Map<string, string> = new Map();\n\n  contact: Contact = {\n    id: 0,\n    ContactName: '',\n    ContactEmail: '',\n    ContactPhone: '',\n  };\n\n  message: Message = {\n    id: 0,\n    TopicId: 0,\n    ContactId: 0,\n    MessageText: '',\n  };\n\n  formProv = new FormGroup({\n    name: new FormControl('',Validators.required),\n    email: new FormControl('',[Validators.required, Validators.email]),\n    phone: new FormControl('',[Validators.required, Validators.pattern('[0-9]{11,15}')]),\n    topic: new FormControl('',Validators.required),\n    mes:new FormControl('',Validators.required),\n    captcha: new FormControl('',Validators.required)\n  })\n\n  constructor(private requestsServise: RequestsService, private router: Router, private formBuilder: FormBuilder){}\n\n  ngOnInit(): void {\n    this.contactList$ = this.requestsServise.getAllContacts();\n    this.topicList$ = this.requestsServise.getAllTopics();\n    this.refreshTopicMap();\n  }\n\n\n\n  refreshTopicMap(){\n    this.requestsServise.getAllTopics().subscribe(data => {\n      this.topicList = data;\n\n      for( let i of data){\n        this.TopicMap.set(this.topicList[i].id, this.topicList[i].topicName)\n      }\n    })\n    \n  }\n\n  get name(){\n    return this.formProv.get('name');\n  }\n  get email(){\n    return this.formProv.get('email');\n  }\n  get phone(){\n    return this.formProv.get('phone');\n  }\n  get topic(){\n    return this.formProv.get('topic');\n  }\n  get mes(){\n    return this.formProv.get('mes');\n  }\n  get captcha(){\n    return this.formProv.get('captcha');\n  }\n\n  addRequest() {\n    this.requestsServise.getAllContacts().subscribe(data => {\n      this.contactList = data;\n      this.newContact = true;\n      for (let i in this.contactList){\n\n        if ((this.contactList[i].contactEmail == this.contact.ContactEmail) && (this.contactList[i].contactPhone == this.contact.ContactPhone)){\n          this.newContact = false; \n          this.message.ContactId = data[+i].id;          \n        }\n      }\n    \n    });\n    this.requestsServise.addMessage(this.message).subscribe({\n      next: (result) => {\n        this.router.navigate(['request/:id']);\n      }\n    });\n   \n\n    if (this.newContact == true){\n      this.requestsServise.addContact(this.contact).subscribe({\n        next: (result) => {\n          this.message.ContactId = Object.values(result)[0];\n          this.requestsServise.addMessage(this.message).subscribe({\n            next: (result) => {\n              this.router.navigate(['request/:id']);\n            }\n          });\n        }\n      });\n    \n\n    } \n\n\n    \n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}