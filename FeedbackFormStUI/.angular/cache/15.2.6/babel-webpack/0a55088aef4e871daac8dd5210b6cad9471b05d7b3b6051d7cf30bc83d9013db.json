{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet FormComponent = class FormComponent {\n  constructor(requestsServise, router, formBuilder) {\n    this.requestsServise = requestsServise;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.contactList = [];\n    this.topicList = [];\n    this.newContact = true;\n    this.TopicMap = new Map();\n    this.contact = {\n      id: 0,\n      ContactName: '',\n      ContactEmail: '',\n      ContactPhone: ''\n    };\n    this.message = {\n      id: 0,\n      TopicId: 0,\n      ContactId: 0,\n      MessageText: ''\n    };\n    this.formProv = new FormGroup({\n      name: new FormControl('', Validators.required)\n    });\n  }\n  ngOnInit() {\n    this.contactList$ = this.requestsServise.getAllContacts();\n    this.topicList$ = this.requestsServise.getAllTopics();\n    this.refreshTopicMap();\n  }\n  refreshTopicMap() {\n    this.requestsServise.getAllTopics().subscribe(data => {\n      this.topicList = data;\n      for (let i of data) {\n        this.TopicMap.set(this.topicList[i].id, this.topicList[i].topicName);\n      }\n    });\n  }\n  get name() {\n    return this.formProv.get('name');\n  }\n  addRequest() {\n    console.warn(this.formProv.value);\n    //   this.requestsServise.getAllContacts().subscribe(data => {\n    //     this.contactList = data;\n    //     this.newContact = true;\n    //     for (let i in this.contactList){\n    //       if ((this.contactList[i].contactEmail == this.contact.ContactEmail) && (this.contactList[i].contactPhone == this.contact.ContactPhone)){\n    //         this.newContact = false; \n    //         this.message.ContactId = data[+i].id;          \n    //       }\n    //     }\n    //   });\n    //   this.requestsServise.addMessage(this.message).subscribe({\n    //     next: (result) => {\n    //       this.router.navigate(['request/:id']);\n    //     }\n    //   });\n    //   if (this.newContact == true){\n    //     this.requestsServise.addContact(this.contact).subscribe({\n    //       next: (result) => {\n    //         this.message.ContactId = Object.values(result)[0];\n    //         this.requestsServise.addMessage(this.message).subscribe({\n    //           next: (result) => {\n    //             this.router.navigate(['request/:id']);\n    //           }\n    //         });\n    //       }\n    //     });\n    //   } \n  }\n};\n\nFormComponent = __decorate([Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss']\n})], FormComponent);\nexport { FormComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAsBC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAYzE,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EA6BxBC,YAAoBC,eAAgC,EAAUC,MAAc,EAAUC,WAAwB;IAA1F,oBAAe,GAAfF,eAAe;IAA2B,WAAM,GAANC,MAAM;IAAkB,gBAAW,GAAXC,WAAW;IAzBjG,gBAAW,GAAQ,EAAE;IACrB,cAAS,GAAQ,EAAE;IACnB,eAAU,GAAY,IAAI;IAE1B,aAAQ,GAAuB,IAAIC,GAAG,EAAE;IAExC,YAAO,GAAY;MACjBC,EAAE,EAAE,CAAC;MACLC,WAAW,EAAE,EAAE;MACfC,YAAY,EAAE,EAAE;MAChBC,YAAY,EAAE;KACf;IAED,YAAO,GAAY;MACjBH,EAAE,EAAE,CAAC;MACLI,OAAO,EAAE,CAAC;MACVC,SAAS,EAAE,CAAC;MACZC,WAAW,EAAE;KACd;IAED,aAAQ,GAAG,IAAId,SAAS,CAAC;MACvBe,IAAI,EAAE,IAAIhB,WAAW,CAAC,EAAE,EAACE,UAAU,CAACe,QAAQ;KAE7C,CAAC;EAE8G;EAEhHC,QAAQ;IACN,IAAI,CAACC,YAAY,GAAG,IAAI,CAACd,eAAe,CAACe,cAAc,EAAE;IACzD,IAAI,CAACC,UAAU,GAAG,IAAI,CAAChB,eAAe,CAACiB,YAAY,EAAE;IACrD,IAAI,CAACC,eAAe,EAAE;EACxB;EAIAA,eAAe;IACb,IAAI,CAAClB,eAAe,CAACiB,YAAY,EAAE,CAACE,SAAS,CAACC,IAAI,IAAG;MACnD,IAAI,CAACC,SAAS,GAAGD,IAAI;MAErB,KAAK,IAAIE,CAAC,IAAIF,IAAI,EAAC;QACjB,IAAI,CAACG,QAAQ,CAACC,GAAG,CAAC,IAAI,CAACH,SAAS,CAACC,CAAC,CAAC,CAAClB,EAAE,EAAE,IAAI,CAACiB,SAAS,CAACC,CAAC,CAAC,CAACG,SAAS,CAAC;;IAExE,CAAC,CAAC;EAEJ;EAEA,IAAId,IAAI;IACN,OAAO,IAAI,CAACe,QAAQ,CAACC,GAAG,CAAC,MAAM,CAAC;EAClC;EAEAC,UAAU;IACZC,OAAO,CAACC,IAAI,CAAC,IAAI,CAACJ,QAAQ,CAACK,KAAK,CAAC;IAG/B;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IAGA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAGA;EAIA;CAED;;AAhGYjC,aAAa,eALzBJ,SAAS,CAAC;EACTsC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWpC,aAAa,CAgGzB;SAhGYA,aAAa","names":["Component","FormControl","FormGroup","Validators","FormComponent","constructor","requestsServise","router","formBuilder","Map","id","ContactName","ContactEmail","ContactPhone","TopicId","ContactId","MessageText","name","required","ngOnInit","contactList$","getAllContacts","topicList$","getAllTopics","refreshTopicMap","subscribe","data","topicList","i","TopicMap","set","topicName","formProv","get","addRequest","console","warn","value","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Мои работы (сайты)\\Feedback_form_ST\\FeedbackFormStUI\\src\\app\\components\\form\\form.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Contact } from 'src/app/models/contact.model';\nimport { Message } from 'src/app/models/message.model';\nimport { RequestsService } from 'src/app/services/requests.service';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss']\n})\nexport class FormComponent implements OnInit {\n\n  contactList$!: Observable<any[]>;\n  topicList$!: Observable<any[]>;\n  contactList: any = [];\n  topicList: any = [];\n  newContact: boolean = true;\n\n  TopicMap:Map<string, string> = new Map();\n\n  contact: Contact = {\n    id: 0,\n    ContactName: '',\n    ContactEmail: '',\n    ContactPhone: '',\n  };\n\n  message: Message = {\n    id: 0,\n    TopicId: 0,\n    ContactId: 0,\n    MessageText: '',\n  };\n\n  formProv = new FormGroup({\n    name: new FormControl('',Validators.required),\n\n  })\n\n  constructor(private requestsServise: RequestsService, private router: Router, private formBuilder: FormBuilder){}\n\n  ngOnInit(): void {\n    this.contactList$ = this.requestsServise.getAllContacts();\n    this.topicList$ = this.requestsServise.getAllTopics();\n    this.refreshTopicMap();\n  }\n\n\n\n  refreshTopicMap(){\n    this.requestsServise.getAllTopics().subscribe(data => {\n      this.topicList = data;\n\n      for( let i of data){\n        this.TopicMap.set(this.topicList[i].id, this.topicList[i].topicName)\n      }\n    })\n    \n  }\n\n  get name(){\n    return this.formProv.get('name');\n  }\n\n  addRequest() {\nconsole.warn(this.formProv.value);\n\n\n  //   this.requestsServise.getAllContacts().subscribe(data => {\n  //     this.contactList = data;\n  //     this.newContact = true;\n  //     for (let i in this.contactList){\n\n  //       if ((this.contactList[i].contactEmail == this.contact.ContactEmail) && (this.contactList[i].contactPhone == this.contact.ContactPhone)){\n  //         this.newContact = false; \n  //         this.message.ContactId = data[+i].id;          \n  //       }\n  //     }\n    \n  //   });\n  //   this.requestsServise.addMessage(this.message).subscribe({\n  //     next: (result) => {\n  //       this.router.navigate(['request/:id']);\n  //     }\n  //   });\n   \n\n  //   if (this.newContact == true){\n  //     this.requestsServise.addContact(this.contact).subscribe({\n  //       next: (result) => {\n  //         this.message.ContactId = Object.values(result)[0];\n  //         this.requestsServise.addMessage(this.message).subscribe({\n  //           next: (result) => {\n  //             this.router.navigate(['request/:id']);\n  //           }\n  //         });\n  //       }\n  //     });\n    \n\n  //   } \n\n\n    \n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}