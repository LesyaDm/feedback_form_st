{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet FormComponent = class FormComponent {\n  constructor(requestsServise, router) {\n    this.requestsServise = requestsServise;\n    this.router = router;\n    this.contactList = [];\n    this.topicList = [];\n    this.newContact = true;\n    this.TopicMap = new Map();\n    this.contact = {\n      id: 0,\n      ContactName: '',\n      ContactEmail: '',\n      ContactPhone: ''\n    };\n    this.message = {\n      id: 0,\n      TopicId: 0,\n      ContactId: 0,\n      MessageText: ''\n    };\n  }\n  ngOnInit() {\n    this.contactList$ = this.requestsServise.getAllContacts();\n    this.topicList$ = this.requestsServise.getAllTopics();\n    this.refreshTopicMap();\n  }\n  refreshTopicMap() {\n    this.requestsServise.getAllTopics().subscribe(data => {\n      this.topicList = data;\n      for (let i of data) {\n        this.TopicMap.set(this.topicList[i].id, this.topicList[i].topicName);\n      }\n    });\n  }\n  addRequest() {\n    this.requestsServise.getAllContacts().subscribe(data => {\n      this.contactList = data;\n      this.newContact = true;\n      for (let i in this.contactList) {\n        if (this.contactList[i].contactEmail == this.contact.ContactEmail && this.contactList[i].contactPhone == this.contact.ContactPhone) {\n          this.newContact = false;\n          this.message.ContactId = data[+i].id;\n        }\n      }\n    });\n    this.requestsServise.addMessage(this.message).subscribe({\n      next: result => {\n        this.router.navigate(['request/:id']);\n      }\n    });\n    if (this.newContact == true) {\n      this.requestsServise.addContact(this.contact).subscribe({\n        next: result => {\n          this.message.ContactId = Object.values(result)[0];\n          this.requestsServise.addMessage(this.message).subscribe({\n            next: result => {\n              this.router.navigate(['request/:id']);\n            }\n          });\n        }\n      });\n    }\n  }\n};\nFormComponent = __decorate([Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss']\n})], FormComponent);\nexport { FormComponent };","map":{"version":3,"mappings":"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","names":["Component","FormComponent","constructor","requestsServise","router","Map","id","ContactName","ContactEmail","ContactPhone","TopicId","ContactId","MessageText","ngOnInit","contactList$","getAllContacts","topicList$","getAllTopics","refreshTopicMap","subscribe","data","topicList","i","TopicMap","set","topicName","addRequest","contactList","newContact","contactEmail","contact","contactPhone","message","addMessage","next","result","navigate","addContact","Object","values","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Мои работы (сайты)\\Feedback_form_ST\\FeedbackFormStUI\\src\\app\\components\\form\\form.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Contact } from 'src/app/models/contact.model';\nimport { Message } from 'src/app/models/message.model';\nimport { RequestsService } from 'src/app/services/requests.service';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss']\n})\nexport class FormComponent implements OnInit {\n\n  contactList$!: Observable<any[]>;\n  topicList$!: Observable<any[]>;\n  contactList: any = [];\n  topicList: any = [];\n  newContact: boolean = true;\n\n  TopicMap:Map<string, string> = new Map();\n\n  contact: Contact = {\n    id: 0,\n    ContactName: '',\n    ContactEmail: '',\n    ContactPhone: '',\n  };\n\n  message: Message = {\n    id: 0,\n    TopicId: 0,\n    ContactId: 0,\n    MessageText: '',\n  };\n\n  constructor(private requestsServise: RequestsService, private router: Router){}\n\n  ngOnInit(): void {\n    this.contactList$ = this.requestsServise.getAllContacts();\n    this.topicList$ = this.requestsServise.getAllTopics();\n    this.refreshTopicMap();\n  }\n\n\n\n  refreshTopicMap(){\n    this.requestsServise.getAllTopics().subscribe(data => {\n      this.topicList = data;\n\n      for( let i of data){\n        this.TopicMap.set(this.topicList[i].id, this.topicList[i].topicName)\n      }\n    })\n    \n  }\n\n  addRequest() {\n    this.requestsServise.getAllContacts().subscribe(data => {\n      this.contactList = data;\n      this.newContact = true;\n      for (let i in this.contactList){\n\n        if ((this.contactList[i].contactEmail == this.contact.ContactEmail) && (this.contactList[i].contactPhone == this.contact.ContactPhone)){\n          this.newContact = false; \n          this.message.ContactId = data[+i].id;          \n        }\n      }\n    \n    });\n    this.requestsServise.addMessage(this.message).subscribe({\n      next: (result) => {\n        this.router.navigate(['request/:id']);\n      }\n    });\n   \n\n    if (this.newContact == true){\n      this.requestsServise.addContact(this.contact).subscribe({\n        next: (result) => {\n          this.message.ContactId = Object.values(result)[0];\n          this.requestsServise.addMessage(this.message).subscribe({\n            next: (result) => {\n              this.router.navigate(['request/:id']);\n            }\n          });\n        }\n      });\n    \n\n    } \n\n\n    \n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}