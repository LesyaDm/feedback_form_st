{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/requests.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class FormComponent {\n  constructor(requestsServise, router, formBuilder) {\n    this.requestsServise = requestsServise;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.contactList = [];\n    this.topicList = [];\n    this.newContact = true;\n    this.siteKey = '6LdFQr4lAAAAAPAR37RURyid0rOym5E0N7RQdoUO';\n    this.TopicMap = new Map();\n    this.contact = {\n      id: 0,\n      ContactName: '',\n      ContactEmail: '',\n      ContactPhone: ''\n    };\n    this.message = {\n      id: 0,\n      TopicId: 0,\n      ContactId: 0,\n      MessageText: ''\n    };\n    this.formCheck = new FormGroup({\n      name: new FormControl('', Validators.required),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      phone: new FormControl('', [Validators.required, Validators.pattern('[0-9]{11,15}')]),\n      topic: new FormControl('', Validators.required),\n      mes: new FormControl('', Validators.required),\n      captcha: new FormControl('', Validators.required)\n    });\n  }\n  ngOnInit() {\n    this.contactList$ = this.requestsServise.getAllContacts();\n    this.topicList$ = this.requestsServise.getAllTopics();\n    this.refreshTopicMap();\n  }\n  refreshTopicMap() {\n    this.requestsServise.getAllTopics().subscribe(data => {\n      this.topicList = data;\n      for (let i of data) {\n        this.TopicMap.set(this.topicList[i].id, this.topicList[i].topicName);\n      }\n    });\n  }\n  get name() {\n    return this.formCheck.get('name');\n  }\n  get email() {\n    return this.formCheck.get('email');\n  }\n  get phone() {\n    return this.formCheck.get('phone');\n  }\n  get topic() {\n    return this.formCheck.get('topic');\n  }\n  get mes() {\n    return this.formCheck.get('mes');\n  }\n  get captcha() {\n    return this.formCheck.get('captcha');\n  }\n  addRequest() {\n    this.requestsServise.getAllContacts().subscribe(data => {\n      this.contactList = data;\n      for (let i in this.contactList) {\n        if (this.contactList[i].contactEmail == this.contact.ContactEmail && this.contactList[i].contactPhone == this.contact.ContactPhone) {\n          this.newContact = false;\n          this.message.ContactId = data[+i].id;\n        }\n      }\n      if (this.newContact == false) {\n        this.requestsServise.addMessage(this.message).subscribe({\n          next: result => {\n            this.router.navigate(['request', Object.values(result)[0]]);\n          }\n        });\n      } else {\n        this.requestsServise.addContact(this.contact).subscribe({\n          next: result => {\n            this.message.ContactId = Object.values(result)[0];\n            this.requestsServise.addMessage(this.message).subscribe({\n              next: result => {\n                this.router.navigate(['request', Object.values(result)[0]]);\n              }\n            });\n          }\n        });\n      }\n    });\n  }\n}\nFormComponent.ɵfac = function FormComponent_Factory(t) {\n  return new (t || FormComponent)(i0.ɵɵdirectiveInject(i1.RequestsService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\nFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FormComponent,\n  selectors: [[\"app-form\"]],\n  decls: 0,\n  vars: 0,\n  template: function FormComponent_Template(rf, ctx) {},\n  styles: [\".feedback[_ngcontent-%COMP%] {\\n  color: #494949;\\n  display: flex;\\n  justify-content: center;\\n  width: 500px;\\n  background: #fff;\\n  border-radius: 12px;\\n  box-shadow: 2px 2px #808080;\\n  font-weight: 800;\\n}\\n\\n.form[_ngcontent-%COMP%] {\\n  position: relative;\\n}\\n.form__title[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  padding: 20px 0 20px 0;\\n  position: absolute;\\n  left: -38px;\\n  color: #fff;\\n  background: #a83f2a;\\n  padding: 5px 25px;\\n  width: 300px;\\n  margin: 15px 0;\\n  box-shadow: 4px 2px 7px #c2c2c2;\\n}\\n.form__title[_ngcontent-%COMP%]:before {\\n  content: \\\"\\\";\\n  position: absolute;\\n  height: 0;\\n  width: 0;\\n  border-style: solid;\\n  border-color: #691d16 transparent transparent;\\n  border-width: 14px 0px 0px 16px;\\n  top: 100%;\\n  left: 0;\\n}\\n.form__questionnaire[_ngcontent-%COMP%] {\\n  margin-top: 70px;\\n}\\n.form__button[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  padding: 5px;\\n  margin: 20px 0 20px 106px;\\n  border: 1px solid #c2c2c2;\\n  border-radius: 5px;\\n  color: #808080;\\n  width: 150px;\\n  cursor: pointer;\\n  background: linear-gradient(#c2c2c2, #fff);\\n}\\n.form__button[_ngcontent-%COMP%]:disabled:hover {\\n  border: 1px solid #c2c2c2;\\n  color: #808080;\\n  width: 150px;\\n  cursor: default;\\n}\\n.form__button[_ngcontent-%COMP%]:hover {\\n  border: 1px solid #808080;\\n  color: #494949;\\n  width: 150px;\\n}\\n\\n.questionnaire[_ngcontent-%COMP%] {\\n  display: grid;\\n  grid-template-columns: 96px 350px;\\n  grid-gap: 10px;\\n}\\n.questionnaire__question[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n}\\n.questionnaire__text[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  padding: 5px;\\n  border: 1px solid #c2c2c2;\\n  border-radius: 5px;\\n  color: #808080;\\n}\\n.questionnaire__text[_ngcontent-%COMP%]:focus-visible {\\n  border: 1px solid #808080;\\n  outline: 0;\\n}\\n.questionnaire__captcha[_ngcontent-%COMP%] {\\n  grid-column: 2/3;\\n}\\n\\n.validation[_ngcontent-%COMP%] {\\n  border-color: #a83f2a;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9mb3JtL2Zvcm0uY29tcG9uZW50LnNjc3MiLCJ3ZWJwYWNrOi8vLi8uLi8uLi8uLi8lRDAlOUMlRDAlQkUlRDAlQjglMjAlRDElODAlRDAlQjAlRDAlQjElRDAlQkUlRDElODIlRDElOEIlMjAoJUQxJTgxJUQwJUIwJUQwJUI5JUQxJTgyJUQxJThCKS9GZWVkYmFja19mb3JtX1NUL0ZlZWRiYWNrRm9ybVN0VUkvc3JjL2FwcC9jb21wb25lbnRzL2Zvcm0vZm9ybS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQTtFQUNFLGNBUFU7RUFRVixhQUFBO0VBQ0EsdUJBQUE7RUFDQSxZQUFBO0VBQ0EsZ0JBYk07RUFjTixtQkFBQTtFQUNBLDJCQUFBO0VBQ0EsZ0JBQUE7QUNQRjs7QURVQTtFQUNDLGtCQUFBO0FDUEQ7QURTRTtFQUNFLGVBQUE7RUFDQSxzQkFBQTtFQUNBLGtCQUFBO0VBQ0QsV0FBQTtFQUNBLFdBQUE7RUFDQSxtQkF4Qkc7RUF5QkgsaUJBQUE7RUFDQyxZQUFBO0VBQ0EsY0FBQTtFQUNBLCtCQUFBO0FDUEo7QURXRTtFQUNFLFdBQUE7RUFDQSxrQkFBQTtFQUNBLFNBQUE7RUFDQSxRQUFBO0VBQ0EsbUJBQUE7RUFDQSw2Q0FBQTtFQUNBLCtCQUFBO0VBQ0EsU0FBQTtFQUNBLE9BQUE7QUNUSjtBRFlFO0VBQ0UsZ0JBQUE7QUNWSjtBRGFFO0VBQ0UsZUFBQTtFQUNBLFlBQUE7RUFDQSx5QkFBQTtFQUNBLHlCQUFBO0VBQ0Esa0JBQUE7RUFDQSxjQXpERztFQTBESCxZQUFBO0VBQ0EsZUFBQTtFQUNBLDBDQUFBO0FDWEo7QURjRTtFQUNFLHlCQUFBO0VBQ0EsY0FqRUc7RUFrRUgsWUFBQTtFQUNBLGVBQUE7QUNaSjtBRGVFO0VBQ0UseUJBQUE7RUFDQSxjQXZFUTtFQXdFUixZQUFBO0FDYko7O0FEaUJBO0VBQ0UsYUFBQTtFQUNBLGlDQUFBO0VBQ0EsY0FBQTtBQ2RGO0FEZ0JFO0VBQ0UsZUFBQTtBQ2RKO0FEaUJFO0VBQ0UsZUFBQTtFQUNBLFlBQUE7RUFDQSx5QkFBQTtFQUNBLGtCQUFBO0VBQ0EsY0EzRkc7QUM0RVA7QURpQkU7RUFDRSx5QkFBQTtFQUNBLFVBQUE7QUNmSjtBRGlCRTtFQUNFLGdCQUFBO0FDZko7O0FEbUJBO0VBQ0UscUJBcEdJO0FDb0ZOIiwic291cmNlc0NvbnRlbnQiOlsiJHdoaXRlOiAjZmZmO1xyXG4kZ3JheTogIzgwODA4MDtcclxuJGRhcmstZ3JheTogIzQ5NDk0OTtcclxuJGxpZ2h0LWdyYXk6ICNjMmMyYzI7XHJcbiRyZWQ6ICNhODNmMmE7XHJcbiRkYXJrLXJlZDogIzY5MWQxNjtcclxuXHJcblxyXG4uZmVlZGJhY2t7XHJcbiAgY29sb3I6ICRkYXJrLWdyYXk7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICB3aWR0aDogNTAwcHg7XHJcbiAgYmFja2dyb3VuZDogJHdoaXRlO1xyXG4gIGJvcmRlci1yYWRpdXM6IDEycHg7XHJcbiAgYm94LXNoYWRvdzogMnB4IDJweCAkZ3JheTtcclxuICBmb250LXdlaWdodDogODAwO1xyXG59XHJcblxyXG4uZm9ybXtcclxuXHRwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgXHJcbiAgJl9fdGl0bGV7XHJcbiAgICBmb250LXNpemU6IDIwcHg7XHJcbiAgICBwYWRkaW5nOiAyMHB4IDAgMjBweCAwO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG5cdCAgbGVmdDogLTM4cHg7XHJcblx0ICBjb2xvcjogI2ZmZjtcclxuXHQgIGJhY2tncm91bmQ6ICRyZWQ7XHJcblx0ICBwYWRkaW5nOiA1cHggMjVweDtcclxuICAgIHdpZHRoOiAzMDBweDtcclxuICAgIG1hcmdpbjogMTVweCAwO1xyXG4gICAgYm94LXNoYWRvdzogNHB4IDJweCA3cHggJGxpZ2h0LWdyYXk7XHJcbiAgfVxyXG5cclxuXHJcbiAgJl9fdGl0bGU6YmVmb3JlIHtcclxuICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBoZWlnaHQ6IDA7XHJcbiAgICB3aWR0aDogMDtcclxuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XHJcbiAgICBib3JkZXItY29sb3I6ICRkYXJrLXJlZCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudDtcclxuICAgIGJvcmRlci13aWR0aDoxNHB4IDBweCAwcHggMTZweDtcclxuICAgIHRvcDogMTAwJTtcclxuICAgIGxlZnQ6IDA7XHJcbiAgfVxyXG5cclxuICAmX19xdWVzdGlvbm5haXJle1xyXG4gICAgbWFyZ2luLXRvcDogNzBweDtcclxuICB9XHJcblxyXG4gICZfX2J1dHRvbntcclxuICAgIGZvbnQtc2l6ZTogMTRweDtcclxuICAgIHBhZGRpbmc6IDVweDtcclxuICAgIG1hcmdpbjogMjBweCAwIDIwcHggMTA2cHg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAkbGlnaHQtZ3JheTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICAgIGNvbG9yOiAkZ3JheTtcclxuICAgIHdpZHRoOiAxNTBweDtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgkbGlnaHQtZ3JheSwgJHdoaXRlKTtcclxuICB9XHJcblxyXG4gICZfX2J1dHRvbjpkaXNhYmxlZDpob3ZlcntcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICRsaWdodC1ncmF5O1xyXG4gICAgY29sb3I6ICRncmF5O1xyXG4gICAgd2lkdGg6IDE1MHB4O1xyXG4gICAgY3Vyc29yOmRlZmF1bHQ7XHJcbiAgfVxyXG5cclxuICAmX19idXR0b246aG92ZXJ7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAkZ3JheTtcclxuICAgIGNvbG9yOiAkZGFyay1ncmF5O1xyXG4gICAgd2lkdGg6IDE1MHB4O1xyXG4gIH1cclxufVxyXG5cclxuLnF1ZXN0aW9ubmFpcmV7XHJcbiAgZGlzcGxheTogZ3JpZDtcclxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDk2cHggMzUwcHg7XHJcbiAgZ3JpZC1nYXA6IDEwcHg7XHJcblxyXG4gICZfX3F1ZXN0aW9ue1xyXG4gICAgZm9udC1zaXplOiAxNHB4O1xyXG4gIH1cclxuXHJcbiAgJl9fdGV4dHtcclxuICAgIGZvbnQtc2l6ZTogMTRweDtcclxuICAgIHBhZGRpbmc6IDVweDtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICRsaWdodC1ncmF5O1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgY29sb3I6ICRncmF5O1xyXG4gIH1cclxuICAmX190ZXh0OmZvY3VzLXZpc2libGV7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAkZ3JheTtcclxuICAgIG91dGxpbmU6IDA7XHJcbiAgfVxyXG4gICZfX2NhcHRjaGF7XHJcbiAgICBncmlkLWNvbHVtbjogMi8zO1xyXG4gIH1cclxufVxyXG5cclxuLnZhbGlkYXRpb257XHJcbiAgYm9yZGVyLWNvbG9yOiAkcmVkO1xyXG59XHJcbiIsIi5mZWVkYmFjayB7XG4gIGNvbG9yOiAjNDk0OTQ5O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgd2lkdGg6IDUwMHB4O1xuICBiYWNrZ3JvdW5kOiAjZmZmO1xuICBib3JkZXItcmFkaXVzOiAxMnB4O1xuICBib3gtc2hhZG93OiAycHggMnB4ICM4MDgwODA7XG4gIGZvbnQtd2VpZ2h0OiA4MDA7XG59XG5cbi5mb3JtIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuLmZvcm1fX3RpdGxlIHtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBwYWRkaW5nOiAyMHB4IDAgMjBweCAwO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGxlZnQ6IC0zOHB4O1xuICBjb2xvcjogI2ZmZjtcbiAgYmFja2dyb3VuZDogI2E4M2YyYTtcbiAgcGFkZGluZzogNXB4IDI1cHg7XG4gIHdpZHRoOiAzMDBweDtcbiAgbWFyZ2luOiAxNXB4IDA7XG4gIGJveC1zaGFkb3c6IDRweCAycHggN3B4ICNjMmMyYzI7XG59XG4uZm9ybV9fdGl0bGU6YmVmb3JlIHtcbiAgY29udGVudDogXCJcIjtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBoZWlnaHQ6IDA7XG4gIHdpZHRoOiAwO1xuICBib3JkZXItc3R5bGU6IHNvbGlkO1xuICBib3JkZXItY29sb3I6ICM2OTFkMTYgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci13aWR0aDogMTRweCAwcHggMHB4IDE2cHg7XG4gIHRvcDogMTAwJTtcbiAgbGVmdDogMDtcbn1cbi5mb3JtX19xdWVzdGlvbm5haXJlIHtcbiAgbWFyZ2luLXRvcDogNzBweDtcbn1cbi5mb3JtX19idXR0b24ge1xuICBmb250LXNpemU6IDE0cHg7XG4gIHBhZGRpbmc6IDVweDtcbiAgbWFyZ2luOiAyMHB4IDAgMjBweCAxMDZweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2MyYzJjMjtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuICBjb2xvcjogIzgwODA4MDtcbiAgd2lkdGg6IDE1MHB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgjYzJjMmMyLCAjZmZmKTtcbn1cbi5mb3JtX19idXR0b246ZGlzYWJsZWQ6aG92ZXIge1xuICBib3JkZXI6IDFweCBzb2xpZCAjYzJjMmMyO1xuICBjb2xvcjogIzgwODA4MDtcbiAgd2lkdGg6IDE1MHB4O1xuICBjdXJzb3I6IGRlZmF1bHQ7XG59XG4uZm9ybV9fYnV0dG9uOmhvdmVyIHtcbiAgYm9yZGVyOiAxcHggc29saWQgIzgwODA4MDtcbiAgY29sb3I6ICM0OTQ5NDk7XG4gIHdpZHRoOiAxNTBweDtcbn1cblxuLnF1ZXN0aW9ubmFpcmUge1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDk2cHggMzUwcHg7XG4gIGdyaWQtZ2FwOiAxMHB4O1xufVxuLnF1ZXN0aW9ubmFpcmVfX3F1ZXN0aW9uIHtcbiAgZm9udC1zaXplOiAxNHB4O1xufVxuLnF1ZXN0aW9ubmFpcmVfX3RleHQge1xuICBmb250LXNpemU6IDE0cHg7XG4gIHBhZGRpbmc6IDVweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2MyYzJjMjtcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xuICBjb2xvcjogIzgwODA4MDtcbn1cbi5xdWVzdGlvbm5haXJlX190ZXh0OmZvY3VzLXZpc2libGUge1xuICBib3JkZXI6IDFweCBzb2xpZCAjODA4MDgwO1xuICBvdXRsaW5lOiAwO1xufVxuLnF1ZXN0aW9ubmFpcmVfX2NhcHRjaGEge1xuICBncmlkLWNvbHVtbjogMi8zO1xufVxuXG4udmFsaWRhdGlvbiB7XG4gIGJvcmRlci1jb2xvcjogI2E4M2YyYTtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"AACA,SAAsBA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;;;;;AAYhF,OAAM,MAAOC,aAAa;EAkCxBC,YAAoBC,eAAgC,EAAUC,MAAc,EAAUC,WAAwB;IAA1F,oBAAe,GAAfF,eAAe;IAA2B,WAAM,GAANC,MAAM;IAAkB,gBAAW,GAAXC,WAAW;IA9BjG,gBAAW,GAAQ,EAAE;IACrB,cAAS,GAAQ,EAAE;IACnB,eAAU,GAAY,IAAI;IAC1B,YAAO,GAAW,0CAA0C;IAE5D,aAAQ,GAAuB,IAAIC,GAAG,EAAE;IAExC,YAAO,GAAY;MACjBC,EAAE,EAAE,CAAC;MACLC,WAAW,EAAE,EAAE;MACfC,YAAY,EAAE,EAAE;MAChBC,YAAY,EAAE;KACf;IAED,YAAO,GAAY;MACjBH,EAAE,EAAE,CAAC;MACLI,OAAO,EAAE,CAAC;MACVC,SAAS,EAAE,CAAC;MACZC,WAAW,EAAE;KACd;IAED,cAAS,GAAG,IAAId,SAAS,CAAC;MACxBe,IAAI,EAAE,IAAIhB,WAAW,CAAC,EAAE,EAACE,UAAU,CAACe,QAAQ,CAAC;MAC7CC,KAAK,EAAE,IAAIlB,WAAW,CAAC,EAAE,EAAC,CAACE,UAAU,CAACe,QAAQ,EAAEf,UAAU,CAACgB,KAAK,CAAC,CAAC;MAClEC,KAAK,EAAE,IAAInB,WAAW,CAAC,EAAE,EAAC,CAACE,UAAU,CAACe,QAAQ,EAAEf,UAAU,CAACkB,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;MACpFC,KAAK,EAAE,IAAIrB,WAAW,CAAC,EAAE,EAACE,UAAU,CAACe,QAAQ,CAAC;MAC9CK,GAAG,EAAC,IAAItB,WAAW,CAAC,EAAE,EAACE,UAAU,CAACe,QAAQ,CAAC;MAC3CM,OAAO,EAAE,IAAIvB,WAAW,CAAC,EAAE,EAACE,UAAU,CAACe,QAAQ;KAChD,CAAC;EAE8G;EAEhHO,QAAQ;IACN,IAAI,CAACC,YAAY,GAAG,IAAI,CAACpB,eAAe,CAACqB,cAAc,EAAE;IACzD,IAAI,CAACC,UAAU,GAAG,IAAI,CAACtB,eAAe,CAACuB,YAAY,EAAE;IACrD,IAAI,CAACC,eAAe,EAAE;EACxB;EAIAA,eAAe;IACb,IAAI,CAACxB,eAAe,CAACuB,YAAY,EAAE,CAACE,SAAS,CAACC,IAAI,IAAG;MACnD,IAAI,CAACC,SAAS,GAAGD,IAAI;MAErB,KAAK,IAAIE,CAAC,IAAIF,IAAI,EAAC;QACjB,IAAI,CAACG,QAAQ,CAACC,GAAG,CAAC,IAAI,CAACH,SAAS,CAACC,CAAC,CAAC,CAACxB,EAAE,EAAE,IAAI,CAACuB,SAAS,CAACC,CAAC,CAAC,CAACG,SAAS,CAAC;;IAExE,CAAC,CAAC;EAEJ;EAEA,IAAIpB,IAAI;IACN,OAAO,IAAI,CAACqB,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;EACnC;EACA,IAAIpB,KAAK;IACP,OAAO,IAAI,CAACmB,SAAS,CAACC,GAAG,CAAC,OAAO,CAAC;EACpC;EACA,IAAInB,KAAK;IACP,OAAO,IAAI,CAACkB,SAAS,CAACC,GAAG,CAAC,OAAO,CAAC;EACpC;EACA,IAAIjB,KAAK;IACP,OAAO,IAAI,CAACgB,SAAS,CAACC,GAAG,CAAC,OAAO,CAAC;EACpC;EACA,IAAIhB,GAAG;IACL,OAAO,IAAI,CAACe,SAAS,CAACC,GAAG,CAAC,KAAK,CAAC;EAClC;EACA,IAAIf,OAAO;IACT,OAAO,IAAI,CAACc,SAAS,CAACC,GAAG,CAAC,SAAS,CAAC;EACtC;EAEAC,UAAU;IACR,IAAI,CAAClC,eAAe,CAACqB,cAAc,EAAE,CAACI,SAAS,CAACC,IAAI,IAAG;MACrD,IAAI,CAACS,WAAW,GAAGT,IAAI;MACvB,KAAK,IAAIE,CAAC,IAAI,IAAI,CAACO,WAAW,EAAC;QAE7B,IAAK,IAAI,CAACA,WAAW,CAACP,CAAC,CAAC,CAACQ,YAAY,IAAI,IAAI,CAACC,OAAO,CAAC/B,YAAY,IAAM,IAAI,CAAC6B,WAAW,CAACP,CAAC,CAAC,CAACU,YAAY,IAAI,IAAI,CAACD,OAAO,CAAC9B,YAAa,EAAC;UACrI,IAAI,CAACgC,UAAU,GAAG,KAAK;UACvB,IAAI,CAACC,OAAO,CAAC/B,SAAS,GAAGiB,IAAI,CAAC,CAACE,CAAC,CAAC,CAACxB,EAAE;;;MAGxC,IAAG,IAAI,CAACmC,UAAU,IAAI,KAAK,EAAC;QAC1B,IAAI,CAACvC,eAAe,CAACyC,UAAU,CAAC,IAAI,CAACD,OAAO,CAAC,CAACf,SAAS,CAAC;UACtDiB,IAAI,EAAGC,MAAM,IAAI;YACf,IAAI,CAAC1C,MAAM,CAAC2C,QAAQ,CAAC,CAAC,SAAS,EAAEC,MAAM,CAACC,MAAM,CAACH,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAC7D;SACD,CAAC;OACH,MAAK;QACJ,IAAI,CAAC3C,eAAe,CAAC+C,UAAU,CAAC,IAAI,CAACV,OAAO,CAAC,CAACZ,SAAS,CAAC;UACtDiB,IAAI,EAAGC,MAAM,IAAI;YACf,IAAI,CAACH,OAAO,CAAC/B,SAAS,GAAGoC,MAAM,CAACC,MAAM,CAACH,MAAM,CAAC,CAAC,CAAC,CAAC;YACjD,IAAI,CAAC3C,eAAe,CAACyC,UAAU,CAAC,IAAI,CAACD,OAAO,CAAC,CAACf,SAAS,CAAC;cACtDiB,IAAI,EAAGC,MAAM,IAAI;gBACf,IAAI,CAAC1C,MAAM,CAAC2C,QAAQ,CAAC,CAAC,SAAS,EAAEC,MAAM,CAACC,MAAM,CAACH,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;cAC7D;aACD,CAAC;UACJ;SACD,CAAC;;IAEN,CAAC,CAAC;EASJ;;AA/GW7C,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAAkD;EAAAC;EAAAC;EAAAC;EAAAC;AAAA","names":["FormControl","FormGroup","Validators","FormComponent","constructor","requestsServise","router","formBuilder","Map","id","ContactName","ContactEmail","ContactPhone","TopicId","ContactId","MessageText","name","required","email","phone","pattern","topic","mes","captcha","ngOnInit","contactList$","getAllContacts","topicList$","getAllTopics","refreshTopicMap","subscribe","data","topicList","i","TopicMap","set","topicName","formCheck","get","addRequest","contactList","contactEmail","contact","contactPhone","newContact","message","addMessage","next","result","navigate","Object","values","addContact","selectors","decls","vars","template","styles"],"sourceRoot":"","sources":["D:\\Мои работы (сайты)\\Feedback_form_ST\\FeedbackFormStUI\\src\\app\\components\\form\\form.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Contact } from 'src/app/models/contact.model';\nimport { Message } from 'src/app/models/message.model';\nimport { RequestsService } from 'src/app/services/requests.service';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.scss']\n})\nexport class FormComponent implements OnInit {\n\n  contactList$!: Observable<any[]>;\n  topicList$!: Observable<any[]>;\n  contactList: any = [];\n  topicList: any = [];\n  newContact: boolean = true;\n  siteKey: string = '6LdFQr4lAAAAAPAR37RURyid0rOym5E0N7RQdoUO';\n\n  TopicMap:Map<string, string> = new Map();\n\n  contact: Contact = {\n    id: 0,\n    ContactName: '',\n    ContactEmail: '',\n    ContactPhone: '',\n  };\n\n  message: Message = {\n    id: 0,\n    TopicId: 0,\n    ContactId: 0,\n    MessageText: '',\n  };\n\n  formCheck = new FormGroup({\n    name: new FormControl('',Validators.required),\n    email: new FormControl('',[Validators.required, Validators.email]),\n    phone: new FormControl('',[Validators.required, Validators.pattern('[0-9]{11,15}')]),\n    topic: new FormControl('',Validators.required),\n    mes:new FormControl('',Validators.required),\n    captcha: new FormControl('',Validators.required)\n  })\n\n  constructor(private requestsServise: RequestsService, private router: Router, private formBuilder: FormBuilder){}\n\n  ngOnInit(): void {\n    this.contactList$ = this.requestsServise.getAllContacts();\n    this.topicList$ = this.requestsServise.getAllTopics();\n    this.refreshTopicMap();\n  }\n\n\n\n  refreshTopicMap(){\n    this.requestsServise.getAllTopics().subscribe(data => {\n      this.topicList = data;\n\n      for( let i of data){\n        this.TopicMap.set(this.topicList[i].id, this.topicList[i].topicName)\n      }\n    })\n    \n  }\n\n  get name(){\n    return this.formCheck.get('name');\n  }\n  get email(){\n    return this.formCheck.get('email');\n  }\n  get phone(){\n    return this.formCheck.get('phone');\n  }\n  get topic(){\n    return this.formCheck.get('topic');\n  }\n  get mes(){\n    return this.formCheck.get('mes');\n  }\n  get captcha(){\n    return this.formCheck.get('captcha');\n  }\n\n  addRequest() {\n    this.requestsServise.getAllContacts().subscribe(data => {\n      this.contactList = data;\n      for (let i in this.contactList){\n\n        if ((this.contactList[i].contactEmail == this.contact.ContactEmail) && (this.contactList[i].contactPhone == this.contact.ContactPhone)){\n          this.newContact = false; \n          this.message.ContactId = data[+i].id;          \n        }\n      }\n      if(this.newContact == false){\n        this.requestsServise.addMessage(this.message).subscribe({\n          next: (result) => {\n            this.router.navigate(['request', Object.values(result)[0]]);\n          }\n        });\n      } else{\n        this.requestsServise.addContact(this.contact).subscribe({\n          next: (result) => {\n            this.message.ContactId = Object.values(result)[0];\n            this.requestsServise.addMessage(this.message).subscribe({\n              next: (result) => {\n                this.router.navigate(['request', Object.values(result)[0]]);\n              }\n            });\n          }\n        });\n      }\n    });\n   \n\n   \n\n    \n\n\n    \n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}