{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/requests.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"ngx-captcha\";\nfunction FormComponent_option_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const topic_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", topic_r3.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(topic_r3.topicName);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    validation: a0\n  };\n};\nexport let FormComponent = /*#__PURE__*/(() => {\n  class FormComponent {\n    constructor(requestsServise, router, formBuilder) {\n      this.requestsServise = requestsServise;\n      this.router = router;\n      this.formBuilder = formBuilder;\n      this.contactList = [];\n      this.topicList = [];\n      this.newContact = true;\n      this.siteKey = '6LdFQr4lAAAAAPAR37RURyid0rOym5E0N7RQdoUO';\n      this.TopicMap = new Map();\n      this.contact = {\n        id: 0,\n        ContactName: '',\n        ContactEmail: '',\n        ContactPhone: ''\n      };\n      this.message = {\n        id: 0,\n        TopicId: 0,\n        ContactId: 0,\n        MessageText: ''\n      };\n      this.formCheck = new FormGroup({\n        name: new FormControl('', Validators.required),\n        email: new FormControl('', [Validators.required, Validators.email]),\n        phone: new FormControl('', [Validators.required, Validators.pattern('[0-9]{11,15}')]),\n        topic: new FormControl('', Validators.required),\n        mes: new FormControl('', Validators.required),\n        captcha: new FormControl('', Validators.required)\n      });\n    }\n    ngOnInit() {\n      this.contactList$ = this.requestsServise.getAllContacts();\n      this.topicList$ = this.requestsServise.getAllTopics();\n      this.refreshTopicMap();\n    }\n    refreshTopicMap() {\n      this.requestsServise.getAllTopics().subscribe(data => {\n        this.topicList = data;\n        for (let i of data) {\n          this.TopicMap.set(this.topicList[i].id, this.topicList[i].topicName);\n        }\n      });\n    }\n    get name() {\n      return this.formCheck.get('name');\n    }\n    get email() {\n      return this.formCheck.get('email');\n    }\n    get phone() {\n      return this.formCheck.get('phone');\n    }\n    get topic() {\n      return this.formCheck.get('topic');\n    }\n    get mes() {\n      return this.formCheck.get('mes');\n    }\n    get captcha() {\n      return this.formCheck.get('captcha');\n    }\n    addRequest() {\n      this.requestsServise.getAllContacts().subscribe(data => {\n        this.contactList = data;\n        for (let i in this.contactList) {\n          if (this.contactList[i].contactEmail == this.contact.ContactEmail && this.contactList[i].contactPhone == this.contact.ContactPhone) {\n            this.newContact = false;\n            this.message.ContactId = data[+i].id;\n          }\n        }\n        if (this.newContact == false) {\n          this.requestsServise.addMessage(this.message).subscribe({\n            next: result => {\n              this.router.navigate(['request', Object.values(result)[0]]);\n            }\n          });\n        } else {\n          this.requestsServise.addContact(this.contact).subscribe({\n            next: result => {\n              this.message.ContactId = Object.values(result)[0];\n              this.requestsServise.addMessage(this.message).subscribe({\n                next: result => {\n                  this.router.navigate(['request', Object.values(result)[0]]);\n                }\n              });\n            }\n          });\n        }\n      });\n    }\n  }\n  FormComponent.ɵfac = function FormComponent_Factory(t) {\n    return new (t || FormComponent)(i0.ɵɵdirectiveInject(i1.RequestsService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder));\n  };\n  FormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FormComponent,\n    selectors: [[\"app-form\"]],\n    decls: 27,\n    vars: 29,\n    consts: [[1, \"feedback\"], [1, \"feedback__form\", \"form\", 3, \"formGroup\", \"ngSubmit\"], [\"form\", \"ngForm\"], [1, \"form__title\"], [1, \"form__questionnaire\", \"questionnaire\"], [\"for\", \"name\", 1, \"questionnaire__question\"], [\"type\", \"text\", \"id\", \"name\", \"name\", \"name\", \"formControlName\", \"name\", 1, \"questionnaire__text\", 3, \"ngModel\", \"ngClass\", \"ngModelChange\"], [\"for\", \"email\", 1, \"questionnaire__question\"], [\"type\", \"email\", \"id\", \"email\", \"name\", \"email\", \"formControlName\", \"email\", 1, \"questionnaire__text\", 3, \"ngModel\", \"ngClass\", \"ngModelChange\"], [\"for\", \"phone\", 1, \"questionnaire__question\"], [\"type\", \"text\", \"id\", \"phone\", \"name\", \"phone\", \"formControlName\", \"phone\", 1, \"questionnaire__text\", 3, \"ngModel\", \"ngClass\", \"ngModelChange\"], [1, \"questionnaire__question\"], [\"name\", \"topicId\", \"id\", \"topicId\", \"formControlName\", \"topic\", 1, \"questionnaire__text\", 3, \"ngModel\", \"ngClass\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"message\", 1, \"questionnaire__question\"], [\"name\", \"message\", \"id\", \"message\", \"cols\", \"30\", \"rows\", \"4\", \"name\", \"message\", \"formControlName\", \"mes\", 1, \"questionnaire__text\", 3, \"ngModel\", \"ngClass\", \"ngModelChange\"], [\"formControlName\", \"captcha\", 1, \"questionnaire__captcha\", 3, \"siteKey\", \"ngClass\"], [\"captchaElem\", \"\"], [\"type\", \"submit\", 1, \"form__button\", 3, \"disabled\"], [3, \"value\"]],\n    template: function FormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1, 2);\n        i0.ɵɵlistener(\"ngSubmit\", function FormComponent_Template_form_ngSubmit_1_listener() {\n          return ctx.addRequest();\n        });\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵtext(4, \"\\u041D\\u0430\\u043F\\u0438\\u0448\\u0438\\u0442\\u0435 \\u043D\\u0430\\u043C\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"div\", 5);\n        i0.ɵɵtext(7, \"\\u0412\\u0430\\u0448\\u0435 \\u0438\\u043C\\u044F:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function FormComponent_Template_input_ngModelChange_8_listener($event) {\n          return ctx.contact.ContactName = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵtext(10, \"\\u0412\\u0430\\u0448 Email:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"input\", 8);\n        i0.ɵɵlistener(\"ngModelChange\", function FormComponent_Template_input_ngModelChange_11_listener($event) {\n          return ctx.contact.ContactEmail = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 9);\n        i0.ɵɵtext(13, \"\\u0412\\u0430\\u0448 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"input\", 10);\n        i0.ɵɵlistener(\"ngModelChange\", function FormComponent_Template_input_ngModelChange_14_listener($event) {\n          return ctx.contact.ContactPhone = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 11);\n        i0.ɵɵtext(16, \"\\u0422\\u0435\\u043C\\u0430:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"select\", 12);\n        i0.ɵɵlistener(\"ngModelChange\", function FormComponent_Template_select_ngModelChange_17_listener($event) {\n          return ctx.message.TopicId = $event;\n        });\n        i0.ɵɵtemplate(18, FormComponent_option_18_Template, 2, 2, \"option\", 13);\n        i0.ɵɵpipe(19, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 14);\n        i0.ɵɵtext(21, \"\\u0412\\u0430\\u0448\\u0435 \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"textarea\", 15);\n        i0.ɵɵlistener(\"ngModelChange\", function FormComponent_Template_textarea_ngModelChange_22_listener($event) {\n          return ctx.message.MessageText = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(23, \"ngx-recaptcha2\", 16, 17);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"button\", 18);\n        i0.ɵɵtext(26, \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C \\u043F\\u0438\\u0441\\u044C\\u043C\\u043E!\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.formCheck);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngModel\", ctx.contact.ContactName)(\"ngClass\", i0.ɵɵpureFunction1(17, _c0, ctx.name && ctx.name.invalid && ctx.name.touched));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.contact.ContactEmail)(\"ngClass\", i0.ɵɵpureFunction1(19, _c0, ctx.email && ctx.email.invalid && ctx.email.touched));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.contact.ContactPhone)(\"ngClass\", i0.ɵɵpureFunction1(21, _c0, ctx.phone && ctx.phone.invalid && ctx.phone.touched));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.message.TopicId)(\"ngClass\", i0.ɵɵpureFunction1(23, _c0, ctx.topic && ctx.topic.touched && !ctx.topic.dirty));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(19, 15, ctx.topicList$));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.message.MessageText)(\"ngClass\", i0.ɵɵpureFunction1(25, _c0, ctx.mes && ctx.mes.invalid && ctx.mes.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"siteKey\", ctx.siteKey)(\"ngClass\", i0.ɵɵpureFunction1(27, _c0, ctx.captcha && ctx.captcha.invalid && ctx.captcha.touched));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.formProv.invalid);\n      }\n    },\n    dependencies: [i4.NgClass, i4.NgForOf, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i5.ReCaptcha2Component, i4.AsyncPipe],\n    styles: [\".feedback[_ngcontent-%COMP%]{color:#494949;display:flex;justify-content:center;width:500px;background:#fff;border-radius:12px;box-shadow:2px 2px gray;font-weight:800}.form[_ngcontent-%COMP%]{position:relative}.form__title[_ngcontent-%COMP%]{font-size:20px;position:absolute;left:-38px;color:#fff;background:#a83f2a;padding:5px 25px;width:300px;margin:15px 0;box-shadow:4px 2px 7px #c2c2c2}.form__title[_ngcontent-%COMP%]:before{content:\\\"\\\";position:absolute;height:0;width:0;border-style:solid;border-color:#691d16 transparent transparent;border-width:14px 0px 0px 16px;top:100%;left:0}.form__questionnaire[_ngcontent-%COMP%]{margin-top:70px}.form__button[_ngcontent-%COMP%]{font-size:14px;padding:5px;margin:20px 0 20px 106px;border:1px solid #c2c2c2;border-radius:5px;color:gray;width:150px;cursor:pointer;background:linear-gradient(#c2c2c2,#fff)}.form__button[_ngcontent-%COMP%]:disabled:hover{border:1px solid #c2c2c2;color:gray;width:150px;cursor:default}.form__button[_ngcontent-%COMP%]:hover{border:1px solid #808080;color:#494949;width:150px}.questionnaire[_ngcontent-%COMP%]{display:grid;grid-template-columns:96px 350px;grid-gap:10px}.questionnaire__question[_ngcontent-%COMP%]{font-size:14px}.questionnaire__text[_ngcontent-%COMP%]{font-size:14px;padding:5px;border:1px solid #c2c2c2;border-radius:5px;color:gray}.questionnaire__text[_ngcontent-%COMP%]:focus-visible{border:1px solid #808080;outline:0}.questionnaire__captcha[_ngcontent-%COMP%]{grid-column:2/3}.validation[_ngcontent-%COMP%]{border-color:#a83f2a}\"]\n  });\n  return FormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}